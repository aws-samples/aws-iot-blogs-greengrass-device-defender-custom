diff --git a/gdk-config.json b/gdk-config.json
new file mode 100644
index 0000000..dc6e0d3
--- /dev/null
+++ b/gdk-config.json
@@ -0,0 +1,16 @@
+{
+  "component": {
+    "com.awsiotblog.DeviceDefenderCustom": {
+      "author": "awsiotblogs",
+      "version": "1.2.7",
+      "build": {
+        "build_system": "zip"
+      },
+      "publish": {
+        "bucket": "awsiotblog-ggv2",
+        "region": "us-east-1"
+      }
+    }
+  },
+  "gdk_version": "1.1.0"
+}
\ No newline at end of file
diff --git a/greengrass_defender_agent/agent.py b/greengrass_defender_agent/agent.py
index 2cde911..c76e0f3 100644
--- a/greengrass_defender_agent/agent.py
+++ b/greengrass_defender_agent/agent.py
@@ -9,6 +9,7 @@ from greengrass_defender_agent import ipc_utils
 
 
 def set_configuration(configuration):
+    config.logger.debug("set_configuration() called.")
     """
     Set up a configuration object given input configuration and apply constraints and defaults.
 
@@ -45,7 +46,7 @@ def set_configuration(configuration):
     return new_config
 
 
-def set_configuration_and_publish(ipc_client, configuration, metrics_collector):
+def set_configuration_and_publish(ipc_client, configuration):
     """
     Call publish_metrics() with the new configuration object.
 
@@ -53,25 +54,39 @@ def set_configuration_and_publish(ipc_client, configuration, metrics_collector):
     :param configuration: a dictionary object of configuration
     :param metrics_collector: metrics collector
     """
+    
+    config.logger.debug(
+        "Set config EnableGPUMetrics: {}".format(
+            configuration["EnableGPUMetrics"]
+        )
+    )
+    # Initialize metrics collector
+    metrics_collector = collector.Collector(short_metrics_names=False, use_custom_metrics=configuration["EnableGPUMetrics"])
+    
     new_config = set_configuration(configuration)
     sample_interval_seconds = new_config[config.SAMPLE_INTERVAL_NEW_CONFIG_KEY]
-    config.logger.info("Collector running on device: {}".format(config.THING_NAME))
-    config.logger.info("Metrics topic: {}".format(config.TOPIC))
-    config.logger.info("Sampling interval: {} seconds".format(sample_interval_seconds))
+    config.logger.debug("Collector running on device: {}".format(config.THING_NAME))
+    config.logger.debug("Metrics topic: {}".format(config.TOPIC))
+    config.logger.debug("Sampling interval: {} seconds".format(sample_interval_seconds))
     publish_metrics(ipc_client, new_config, metrics_collector, sample_interval_seconds)
+    return metrics_collector
 
 
-def wait_for_config_changes(ipc_client, metrics_collector):
+def wait_for_config_changes(ipc_client):
     """
     Wait for configuration changes.
 
     :param ipc_client: Ipc client
     :param metrics_collector: metrics collector
     """
+    config.logger.debug("wait_for_config_changes() entered.")
     with config.condition:
+        config.logger.debug("Configuration wait started")
         config.condition.wait()
-        set_configuration_and_publish(ipc_client, ipc_client.get_configuration(), metrics_collector)
-    wait_for_config_changes(ipc_client, metrics_collector)
+        config.logger.debug("Configuration update received.")
+        set_configuration_and_publish(ipc_client, ipc_client.get_configuration())
+        config.logger.debug("set_configuration_and_publish() called after configuration update.")
+    wait_for_config_changes(ipc_client)
 
 
 def publish_metrics(ipc_client, config_changed, metrics_collector, sample_interval_seconds):
@@ -121,15 +136,13 @@ def main():
     ipc_client.subscribe_to_iot_core(config.TOPIC + "/accepted")
     ipc_client.subscribe_to_iot_core(config.TOPIC + "/rejected")
 
-    # Initialize metrics collector
-    metrics_collector = collector.Collector(short_metrics_names=False)
-
     # Start collecting and publishing metrics
-    set_configuration_and_publish(ipc_client, configuration, metrics_collector)
-
+    metrics_collector = set_configuration_and_publish(ipc_client, configuration)
+    config.logger.debug("metrics_collector returned")
     # Subscribe to the subsequent configuration changes
     ipc_client.subscribe_to_config_updates()
+    config.logger.debug("ipc_client subscribed to updates")
     Thread(
         target=wait_for_config_changes,
-        args=(ipc_client, metrics_collector),
+        args=(ipc_client, ),
     ).start()
diff --git a/greengrass_defender_agent/config.py b/greengrass_defender_agent/config.py
index 6985689..01ad467 100644
--- a/greengrass_defender_agent/config.py
+++ b/greengrass_defender_agent/config.py
@@ -24,5 +24,5 @@ condition = Condition()
 # Get a logger
 logger = logging.getLogger()
 handler = logging.StreamHandler(sys.stdout)
-logger.setLevel(logging.INFO)
+logger.setLevel(logging.DEBUG)
 logger.addHandler(handler)
diff --git a/greengrass_defender_agent/ipc_utils.py b/greengrass_defender_agent/ipc_utils.py
index 6a754ef..6e47c57 100644
--- a/greengrass_defender_agent/ipc_utils.py
+++ b/greengrass_defender_agent/ipc_utils.py
@@ -113,7 +113,7 @@ class IPCUtils:
         "SampleIntervalSeconds".
         """
         try:
-            subsreq = SubscribeToConfigurationUpdateRequest(key_path=[config.SAMPLE_INTERVAL_CONFIG_KEY])
+            subsreq = SubscribeToConfigurationUpdateRequest(key_path=[])
             subscribe_operation = self.ipc_client.new_subscribe_to_configuration_update(
                 ConfigUpdateHandler()
             )
diff --git a/recipe.json b/recipe.json
new file mode 100644
index 0000000..86d8d5d
--- /dev/null
+++ b/recipe.json
@@ -0,0 +1,68 @@
+{
+  "RecipeFormatVersion": "2020-01-25",
+  "ComponentName": "{COMPONENT_NAME}",
+  "ComponentVersion": "{COMPONENT_VERSION}",
+  "ComponentDescription": "The Device Defender component notifies administrators about changes in the state of Greengrass core devices. This can help identify unusual behavior that might indicate a compromised device.",
+  "ComponentPublisher": "{COMPONENT_AUTHOR}",
+  "ComponentConfiguration": {
+    "DefaultConfiguration": {
+      "accessControl": {
+        "aws.greengrass.ipc.mqttproxy": {
+          "{COMPONENT_NAME}:mqttproxy:1": {
+            "policyDescription": "Access to publish",
+            "operations": [
+              "aws.greengrass#PublishToIoTCore"
+            ],
+            "resources": [
+              "$aws/things/+/defender/metrics/json"
+            ]
+          },
+          "{COMPONENT_NAME}:mqttproxy:2": {
+            "policyDescription": "Access to subscribe",
+            "operations": [
+              "aws.greengrass#SubscribeToIoTCore"
+            ],
+            "resources": [
+              "$aws/things/+/defender/metrics/json/accepted",
+              "$aws/things/+/defender/metrics/json/rejected"
+            ]
+          }
+        }
+      },
+      "SampleIntervalSeconds": "300",
+      "UseInstaller": "true",
+      "EnableGPUMetrics": false
+    }
+  },
+  "ComponentDependencies": {
+    "aws.greengrass.Nucleus": {
+      "VersionRequirement": ">=2.0.0 <3.0.0",
+      "DependencyType": "SOFT"
+    }
+  },
+  "Manifests": [
+    {
+      "Platform": {
+        "os": "/darwin|linux/",
+        "architecture": "*"
+      },
+      "Lifecycle": {
+        "install": {
+          "requiresPrivilege": "true",
+          "script": "if {configuration:/UseInstaller} ; then pip3 install -e {artifacts:decompressedPath}/com.awsiotblog.DeviceDefenderCustom/greengrass_defender_agent/AWSIoTDeviceDefenderAgentSDK --user && python3 -u {artifacts:decompressedPath}/com.awsiotblog.DeviceDefenderCustom/installer.py ; fi"
+        },
+        "run": {
+          "requiresPrivilege": "true",
+          "script": "python3 -u {artifacts:decompressedPath}/com.awsiotblog.DeviceDefenderCustom/run_agent.py"
+        }
+      },
+      "Artifacts": [
+        {
+          "URI": "s3://awsiotblog-ggv2/{COMPONENT_NAME}/{COMPONENT_VERSION}/com.awsiotblog.DeviceDefenderCustom.zip",
+          "Unarchive": "ZIP"
+        }
+      ]
+    }
+  ],
+  "Lifecycle": {}
+}
\ No newline at end of file
diff --git a/requirements.txt b/requirements.txt
deleted file mode 100644
index 57c22a7..0000000
--- a/requirements.txt
+++ /dev/null
@@ -1 +0,0 @@
-git+https://github.com/aws-samples/aws-iot-device-defender-agent-sdk-python.git@a3d27c51311e12625bd0b774e8b730ead3bc515d
\ No newline at end of file
